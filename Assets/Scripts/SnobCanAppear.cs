using System;
using System.Collections.Generic;

namespace UnityEngine.XR.iOS
{
	public class SnobCanAppear : MonoBehaviour
	{
		public Transform m_HitTransform;
		public float maxRayDistance = 30.0f;
		public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer
        GameObject controller;
        Controller cont;
        void Awake(){
            moveToFront();

        }
        void Start(){
            controller = GameObject.FindWithTag("GameController");
            cont = controller.GetComponent<Controller>();
        }
		void moveToFront () {
			m_HitTransform.position = Camera.main.transform.position + new Vector3(0,0,1);
			m_HitTransform.LookAt(Camera.main.transform.position);
			//m_HitTransform.position += new Vector3(0,-1,0);

            Ray ray = Camera.main.ScreenPointToRay (new Vector3(Screen.width/2,Screen.height/2));
            RaycastHit hit;
            
            //we'll try to hit one of the plane collider gameobjects that were generated by the plugin
            //effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
            if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) {
                //we're going to get the position from the contact point
                //m_HitTransform.position = hit.point + new Vector3(0,2,0);
                //Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));

                //and the rotation from the transform of the plane collider
                //m_HitTransform.rotation = hit.transform.rotation;

         
            }

				
		}

        bool HitTestWithResultType (ARPoint point, ARHitTestResultType resultTypes)
        {
            List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, resultTypes);
            if (hitResults.Count > 0) {
                foreach (var hitResult in hitResults) {
                    Debug.Log ("Got hit! in snob can");
                    m_HitTransform.position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);
                    m_HitTransform.rotation = UnityARMatrixOps.GetRotation (hitResult.worldTransform);
                    Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));
                    return true;
                }
            }
            return false;
        }
    void Update(){
        if (Time.frameCount < 30){
            moveToFront();
        }
        }
    
    void OnBecameInvisible()
    {
        Debug.Log("became invisi");
        if (cont.mode == Controller.modes.playing){
            Debug.Log("setmyself inactive");
            gameObject.active = false;
        }
    }

    }
    
}

